/* 
------------------------------------------------------------------------
FASTlib for Clipper, including all source code, examples and any other 
file has been donated to Open Source community

Manu Roibal. Bilbao, May 7 2011

------------------------------------------------------------------------
Please, contact me at	manuroibal@gmail.com
Follow me at Twitter	@manuroibal on Twitter
My Linkedin profile	www.linkedin.com/manuroibal

Or visit my web site at	www.tonsofit.com
------------------------------------------------------------------------
*/


#pragma inline

#include "\libs\clipapi\clipapi.h"
#include "\clip\bc\include\dos.h"



HIDE BOOL  fastClockInstall = FALSE;
HIDE WORD  fastClockPosY    = 0;
HIDE WORD  fastClockPosX    = 71;
HIDE COLOR fastClockColor;
HIDE WORD  fastClockHandle;
HIDE BOOL  fastClockEntry;



HIDE BYTE _fastClockClrGet( BYTE wClrPos, BYTE nMode )
  {
  COLOR Colors[ 5 ];
  BYTE wColor = 0;

  _gtGetColor( Colors );
  if ( ! nMode )
    {
    wColor += ( Colors[ wClrPos ].Fore.Blue )  ? 0x01: 0;
    wColor += ( Colors[ wClrPos ].Fore.Green ) ? 0x02: 0;
    wColor += ( Colors[ wClrPos ].Fore.Red )   ? 0x04: 0;
    wColor += ( Colors[ wClrPos ].Fore.Attr )  ? 0x08: 0;
    }
  else
    {
    wColor += ( Colors[ wClrPos ].Back.Blue )  ? 0x01: 0;
    wColor += ( Colors[ wClrPos ].Back.Green ) ? 0x02: 0;
    wColor += ( Colors[ wClrPos ].Back.Red )   ? 0x04: 0;
    wColor += ( Colors[ wClrPos ].Back.Attr )  ? 0x08: 0;
    }
  return( wColor );
  }


HIDE void fastClock( void )
  {
  BYTE   cBuffer[ 8 ];
  BYTE   cHora[ 8 ];
  COLOR  sColor;
  BYTE   nColor;
  INDEX  nInd;
  WORD   nParcial;

  if ( vPointerBios[ 0x49 ] == 0x3 && ! fastClockEntry )
    {
    fastClockEntry = TRUE;
    _ostime( cBuffer );
    _fastStr( cHora, cBuffer[ 0 ] );
    cHora[ 2 ] = ':';
    _fastStr( cHora + 3, cBuffer[ 2 ] );
    cHora[ 5 ] = ':';
    _fastStr( cHora + 6, cBuffer[ 4 ] );
    _gtGetColor( & sColor );
    _gtSetColor( & fastClockColor );
    nColor   =  _fastClockClrGet( 0, 0 );
    nColor   += _fastClockClrGet( 0, 4 ) << 4;
    nParcial =  fastClockPosY * 80 + fastClockPosX;
    for ( nInd = 0; nInd < 8; nInd++ )
      {
      ( vPointerText + nParcial + nInd )->ascii  = cHora[ nInd ];
      ( vPointerText + nParcial + nInd )->attrib = nColor;
      }
    _gtSetColor( & sColor );
    fastClockEntry = FALSE;
    }
  }


CLIPPER Clock()
  {
  BOOL lRet = fastClockInstall;
  WORD nAux = 0;

  _fastForce();
  if ( _parinfo( 0 ) > 0 )
    {
    if ( _parl( 1 ) )
      {
      if ( ! fastClockInstall )
        {
        fastClockPosY = ( ( _parinfo( 2 ) == 2 ) ? _parni( 2 ) : fastClockPosY );
        fastClockPosX = ( ( _parinfo( 3 ) == 2 ) ? _parni( 3 ) : fastClockPosX );
        CParse( ( ( _parinfo( 4 ) == 1 ) ? _parc( 4 ) : "GR+/B" ), & nAux, & fastClockColor );
        fastClockHandle  = _evRegReceiverFunc( (EVENTFUNCP)fastClock, 0xFFFF );
        fastClockInstall = TRUE;
        fastClockEntry   = FALSE;
        }
      }
    else
      {
      if ( fastClockInstall )
        {
        _evDeregReceiver( fastClockHandle );
        fastClockInstall = FALSE;
        }
      }
    }
  _retl( lRet );
  }

