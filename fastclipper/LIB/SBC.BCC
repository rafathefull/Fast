/* 
------------------------------------------------------------------------
FASTlib for Clipper, including all source code, examples and any other 
file has been donated to Open Source community

Manu Roibal. Bilbao, May 7 2011

------------------------------------------------------------------------
Please, contact me at	manuroibal@gmail.com
Follow me at Twitter	@manuroibal on Twitter
My Linkedin profile	www.linkedin.com/manuroibal

Or visit my web site at	www.tonsofit.com
------------------------------------------------------------------------
*/


#pragma inline

#include "\libs\clipapi\clipapi.h"
#include "\clip\bc\include\dos.h"


#define MASTER_VOL  0x22
#define VOC_VOL     0x04
#define LINE_VOL    0x2e
#define FM_VOL      0x26
#define CD_VOL      0x28
#define RECORD_VOL  0x0C


CLIPPER sbMastVolR ()  // Master volumen derecho
  {
  BYTE nMode;

  _fastForce();
  _fastOutPortB(0x224, MASTER_VOL);
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, MASTER_VOL );
    _fastOutPortB( 0x225, ( nMode & 0xF0 ) + ( _parni( 1 ) & 0x0F ) );
    }
  _retni( nMode & 0x0F );
  }


CLIPPER sbMastVolL ()  // Master volumen izquierdo
  {
  BYTE nMode;

  _fastOutPortB(0x224, MASTER_VOL);
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, MASTER_VOL );
    _fastOutPortB( 0x225, ( nMode & 0x0F ) + ( ( _parni( 1 ) & 0x0F ) << 4 ) );
    }
  _retni( nMode >> 4 );
  }


CLIPPER sbVocVolR ()  // Voc volumen derecho
  {
  BYTE nMode;

  _fastOutPortB(0x224, VOC_VOL);
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, VOC_VOL );
    _fastOutPortB( 0x225, ( nMode & 0xF0 ) + ( _parni( 1 ) & 0x0F ) );
    }
  _retni( nMode & 0x0F );
  }


CLIPPER sbVocVolL ()  // Voc volumen izquierdo
  {
  BYTE nMode;

  _fastOutPortB(0x224, VOC_VOL);
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, VOC_VOL );
    _fastOutPortB( 0x225, ( nMode & 0x0F ) + ( ( _parni( 1 ) & 0x0F ) << 4 ) );
    }
  _retni( nMode >> 4 );
  }


CLIPPER sbLineVolR ()  // Line volumen derecho
  {
  BYTE nMode;

  _fastOutPortB(0x224, LINE_VOL);
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, LINE_VOL );
    _fastOutPortB( 0x225, ( nMode & 0xF0 ) + ( _parni( 1 ) & 0x0F ) );
    }
  _retni( nMode & 0x0F );
  }


CLIPPER sbLineVolL ()  // Line volumen izquierdo
  {
  BYTE nMode;

  _fastOutPortB(0x224, LINE_VOL);
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, LINE_VOL );
    _fastOutPortB( 0x225, ( nMode & 0x0F ) + ( ( _parni( 1 ) & 0x0F ) << 4 ) );
    }
  _retni( nMode >> 4 );
  }


CLIPPER sbFMVolR ()  // FM volumen derecho
  {
  BYTE nMode;

  _fastOutPortB(0x224, FM_VOL);
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, FM_VOL );
    _fastOutPortB( 0x225, ( nMode & 0xF0 ) + ( _parni( 1 ) & 0x0F ) );
    }
  _retni( nMode & 0x0F );
  }


CLIPPER sbFMVolL ()  // FM volumen izquierdo
  {
  BYTE nMode;

  _fastOutPortB(0x224, FM_VOL);
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, FM_VOL );
    _fastOutPortB( 0x225, ( nMode & 0x0F ) + ( ( _parni( 1 ) & 0x0F ) << 4 ) );
    }
  _retni( nMode >> 4 );
  }


CLIPPER sbCDVolR()  // volumen del CD derecho
  {
  BYTE nMode;

  _fastOutPortB( 0x224, CD_VOL );
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, CD_VOL );
    _fastOutPortB( 0x225, ( nMode & 0xF0 ) + ( _parni( 1 ) & 0x0F ) );
    }
  _retni( nMode & 0x0F );
  }


CLIPPER sbCDVolL()  // volumen del CD izquierdo
  {
  BYTE nMode;

  _fastOutPortB( 0x224, CD_VOL );
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, CD_VOL );
    _fastOutPortB( 0x225, ( nMode & 0x0F ) + ( ( _parni( 1 ) & 0x0F ) << 4 ) );
    }
  _retni( nMode >> 4 );
  }


CLIPPER sbRecScrR()  // recording source derecho
  {
  BYTE nMode;

  _fastOutPortB( 0x224, RECORD_VOL );
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, RECORD_VOL );
    _fastOutPortB( 0x225, ( nMode & 0xF0 ) + ( _parni( 1 ) & 0x0F ) );
    }
  _retni( nMode & 0x0F );
  }


CLIPPER sbRecScrL()  // recording source izquierdo
  {
  BYTE nMode;

  _fastOutPortB( 0x224, RECORD_VOL );
  nMode = _fastInPortB( 0x225 );
  if ( _parinfo( 1 ) == 2 )
    {
    _fastOutPortB( 0x224, RECORD_VOL );
    _fastOutPortB( 0x225, ( nMode & 0x0F ) + ( ( _parni( 1 ) & 0x0F ) << 4 ) );
    }
  _retni( nMode >> 4 );
  }



