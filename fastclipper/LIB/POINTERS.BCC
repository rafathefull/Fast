/* 
------------------------------------------------------------------------
FASTlib for Clipper, including all source code, examples and any other 
file has been donated to Open Source community

Manu Roibal. Bilbao, May 7 2011

------------------------------------------------------------------------
Please, contact me at	manuroibal@gmail.com
Follow me at Twitter	@manuroibal on Twitter
My Linkedin profile	www.linkedin.com/manuroibal

Or visit my web site at	www.tonsofit.com
------------------------------------------------------------------------
*/


#pragma inline

#include "\libs\clipapi\clipapi.h"
#include "\clip\bc\include\dos.h"
#include "\libs\clipapi\linker.h"


struct VideoT far *vPointerText;
LPBYTE             vPointerGraph;
LPBYTE             vPointerBios;
LPBYTE             vPointerInter;
LPBYTE             vPointerHardCopy;
LPBYTE             vPointerFontGraph = NULL;
LPBYTE             vPointerFontText  = NULL;


// #define DEMO_VERSION  TRUE

#ifdef DEMO_VERSION

#define DEMO_TIME  (DWORD)(1092*15)

extern WORD strlen( const char * );


HIDE DWORD vPointerCont;
HIDE BYTE  vPointerFlag;


HIDE DWORD nTime( void )
  {
  WORD nDX, nCX;

  _AH = 0x0;
  geninterrupt( INT_CLOCK );
  nCX = _CX;
  nDX = _DX;
  return( nDX + _fastShl( nCX, 16 ) );
  }


HIDE LPSTR Conv( LPSTR cCadena )
  {
  INDEX nInd;

  for ( nInd = 0; nInd < strlen( cCadena ); nInd++ )
    cCadena[ nInd ]--;
  return( (LPSTR)cCadena );
  }


HIDE void _evFunc()
  {
  if ( ( nTime() >= vPointerCont + DEMO_TIME || nTime() < vPointerCont ) && ( ! vPointerFlag ) )
    {
    vPointerFlag = TRUE;
    _AX = 0x3;
    geninterrupt( INT_VIDEO );
    _gtScroll( 0, 0, _gtMaxRow(), _gtMaxCol(), 0, 0 );
    _gtWriteAt( 1, 0, (LPBYTE)Conv( "GBTU!Mjcsbsz!nfttbhf;!Vosfhjtufsfe!wfstjpo!ujnf!fyibvtufe/" ), 58 );
    _gtSetPos( 2, 0 );
    _gtSetCursor( 1 );
    _PutSym( _Get_Sym( (LPSTR)Conv( "``RVJU" ) ) );
    _tos++;
    _xDo( 0 );
    }
  }
#endif


CLIPPER vInitVideo()
  {
  WORD nSeg = ( _parni( 1 ) == 7 ) ? 0xB000 : 0xB800;

  vPointerText     = ExoProtectedPtr( MK_FP( nSeg,   0x0 ), 0x8000 );
  vPointerGraph    = ExoProtectedPtr( MK_FP( 0xA000, 0x0 ), 0x0 );
  vPointerBios     = ExoProtectedPtr( MK_FP( 0x0040, 0x0 ), 0x100 );
  vPointerInter    = ExoProtectedPtr( MK_FP( 0x0000, 0x0 ), 0x100 );
  vPointerHardCopy = ExoProtectedPtr( MK_FP( 0x0050, 0x0 ), 0x100 );
#ifdef DEMO_VERSION
  vPointerFlag = FALSE;
  vPointerCont = nTime();
  _evRegReceiverFunc( _evFunc, 0xFFFF );
#endif
  }


LPBYTE vGetPointerFont( BOOL lMode )
  {
  if ( lMode )
    {
    asm push es
    asm push bp
    _AX = 0x1130;
    _BX = 0x0100;
    geninterrupt( INT_VIDEO );
    _AX = _ES;
    _BX = _BP;
    asm pop bp
    asm pop es
    vPointerFontGraph = MK_FP( _AX, _BX );
    return( vPointerFontGraph );
    }
  else
    {
    if ( vPointerFontText == NULL )
      {
      asm push es
      asm push bp
      _AX = 0x1130;
      _BX = 0x0600;
      geninterrupt( INT_VIDEO );
      _AX = _ES;
      _BX = _BP;
      asm pop bp
      asm pop es
      vPointerFontText = MK_FP( _AX, _BX );
      }
    return( vPointerFontText );
    }
  }
