/* 
------------------------------------------------------------------------
FASTlib for Clipper, including all source code, examples and any other 
file has been donated to Open Source community

Manu Roibal. Bilbao, May 7 2011

------------------------------------------------------------------------
Please, contact me at	manuroibal@gmail.com
Follow me at Twitter	@manuroibal on Twitter
My Linkedin profile	www.linkedin.com/manuroibal

Or visit my web site at	www.tonsofit.com
------------------------------------------------------------------------
*/


#pragma inline

#include "\libs\clipapi\clipapi.h"
#include "\clip\bc\include\dos.h"
#include "\libs\clipapi\linker.h"


#define INIT_MP_INT             0x1500;
#define CDREQ_MP_INT            0x1510;

#define STAT_HAS_AN_ERROR       0x8000
#define STAT_BUSY               0x0200
#define STAT_DONE               0x0100

#define CD_EJECT_COMMAND        0
#define CD_CLOSE_COMMAND        5
#define CD_STATUS_COMMAND       6
#define CD_SEEK_COMMAND         131
#define CD_PLAY_COMMAND         132
#define CD_STOP_COMMAND         133
#define CD_RESUME_COMMAND       136

#define READ_IOCTL_COMMAND      3
#define WRITE_IOCTL_COMMAND     12

#define GET_AUDIO_DISKINFO      0x0A
#define GET_AUDIO_TRACKINFO     0x0B
#define GET_AUDIO_TIMEINFO      0x0C

#define ADDR_HSG                0
#define ADDR_RED                1


typedef struct
{
   BYTE  ParamLength;
   BYTE  SubUnit;
   BYTE  CommandCode;
   WORD  Status;
   DWORD Reserved1;
   DWORD Reserved2;
   BYTE  AddressMode;
   FARP  BeginPointer;
   DWORD Length;
   DWORD Reserved3;
} CDCmdStru;


typedef struct
{
   BYTE  CommandCode;
   BYTE  TrackNumber;
   DWORD StartAddress;
   BYTE  Control;
} CDTrackInfoStru;


typedef struct
{
   BYTE  CommandCode;
   BYTE  TrackNumber;
   BYTE  SongNumber;
   BYTE  CuentaAtras;
   BYTE  Minutos;
   BYTE  Segundos;
   BYTE  Decimas;
} CDDiskStatus;


typedef struct
{
  BYTE CommandCode;
} CDEjectStru;


typedef struct
{
  BYTE  CommandCode;
  DWORD Status;
} CDStatusStru;


typedef struct
{
   BYTE  AddrMode;
   DWORD FrameOffset;
   DWORD NumberFrames;
} CDPlayStru;


typedef struct DiskInfo_Rec {
   BYTE  CommandCode;
   BYTE  LoTrack;
   BYTE  HiTrack;
   DWORD LeadOut;
} CDDiskInfoStru;


HIDE int             CDRomLoaded  = 0;
HIDE int             CDRomDrive   = 0;
HIDE CDCmdStru       CDCmdBlock;
HIDE CDTrackInfoStru *TrackInfo   = NULL;
HIDE CDDiskInfoStru  DiskInfo;



HIDE DWORD Red2HSG( DWORD RedValue )
  {
  DWORD Secs       = _fastShr( RedValue & 0x0000ff00L,  8 );
  DWORD Mins       = _fastShr( RedValue & 0x00ff0000L, 16 );
  DWORD PlusFrames = RedValue & 0x000000ffL;

  return( _fastMul( _fastMul( Mins, 60L ) + Secs, 75L ) + PlusFrames );
  }


HIDE BYTE Song2Real( BYTE nSong )
  {
  BYTE nNewSong[ 2 ];

  _fastStr( nNewSong, nSong );
  nSong = nNewSong[ 1 ] - 0x30 +
          ( nNewSong[ 0 ] - 0x30 ) * 10 -
          ( nSong >> 4 ) * 6;
  return( nSong );
  }


HIDE WORD SendCDCommand( WORD CommandCode, FARP BeginPtr, LONG Length, BOOL lBuffer )
  {
  EXOREGS sRegs;
  FARP    cCMDHigh   = _xalloclow( sizeof( CDCmdStru ) );
  FARP    cCMDLow    = ExoRealPtr( cCMDHigh );
  FARP    cBeginHigh = NULL;
  FARP    cBeginLow  = NULL;

  _fastForce();
  if ( Length > 0 && ! lBuffer )
    {
    cBeginHigh = _xalloclow( (WORD)Length );
    cBeginLow  = ExoRealPtr( cBeginHigh );
    _bcopy( cBeginHigh, BeginPtr, (WORD)Length );
    }
  else
    cBeginLow = BeginPtr;
  CDCmdBlock.ParamLength  = 13;
  CDCmdBlock.SubUnit      = 0;
  CDCmdBlock.CommandCode  = CommandCode;
  CDCmdBlock.Status       = 0;
  CDCmdBlock.AddressMode  = ADDR_HSG;
  CDCmdBlock.BeginPointer = cBeginLow;
  CDCmdBlock.Length       = Length;
  CDCmdBlock.Reserved3    = 0;
  _bcopy( cCMDHigh, (LPBYTE)& CDCmdBlock, sizeof( CDCmdStru ) );
  sRegs.es = FP_SEG( cCMDLow );
  sRegs.bx = FP_OFF( cCMDLow );
  sRegs.cx = CDRomDrive;
  sRegs.ax = CDREQ_MP_INT;
  ExoRMInterrupt( INT_MISCEL, & sRegs, & sRegs );
  _bcopy( (LPBYTE)& CDCmdBlock, cCMDHigh, sizeof( CDCmdStru ) );
  _xfreelow( cCMDHigh );
  if ( Length > 0 && ! lBuffer )
    {
    _bcopy( BeginPtr, cBeginHigh, (WORD)Length );
    _xfreelow( cBeginHigh );
    }
  return( CDCmdBlock.Status );
  }



HIDE DWORD CDTrackInfo( WORD TrackNumber, WORD Minutes, WORD Seconds, WORD Frames )
  {
  LONG nResult;

  TrackInfo[ TrackNumber ].CommandCode = GET_AUDIO_TRACKINFO;
  TrackInfo[ TrackNumber ].TrackNumber = TrackNumber;
  SendCDCommand( READ_IOCTL_COMMAND, &( TrackInfo[ TrackNumber ] ), sizeof( CDTrackInfoStru ), FALSE );
  nResult =  TrackInfo[ TrackNumber ].StartAddress;
  nResult += _fastMul( _fastMul( Minutes, 60L ) + (long)Seconds, 75L ) + (long)Frames;
  return( Red2HSG( nResult ) );
  }


HIDE WORD _cdInstall( void )
  {
  EXOREGS sRegs;
  LPBYTE  cHigh = _xalloclow( 2048 );
  LPBYTE  cLow  = ExoRealPtr( cHigh );
  BOOL    lOld;

  if ( TrackInfo == NULL )
    TrackInfo = ( CDTrackInfoStru * )_xalloclow( 20 * sizeof( CDTrackInfoStru ) );
  sRegs.ax = INIT_MP_INT;
  sRegs.bx = 0x0;
  ExoRMInterrupt( INT_MISCEL, & sRegs, & sRegs );
  CDRomDrive  = sRegs.cx;
  CDRomLoaded = sRegs.bx;
  sRegs.ax = 0x150B;
  sRegs.cx = CDRomDrive;
  ExoRMInterrupt( INT_MISCEL, & sRegs, & sRegs );
  lOld = ( sRegs.bx == 0xADAD ) & ( sRegs.ax != 0x0 );
  sRegs.ax = 0x1505;
  sRegs.cx = CDRomDrive;
  sRegs.dx = 0x0;
  sRegs.es = FP_SEG( cLow );
  sRegs.bx = FP_OFF( cLow );
  lOld &= ExoRMInterrupt( INT_MISCEL, & sRegs, & sRegs ) & 1;
  _xfreelow( cHigh );
  return( lOld );
  }


CLIPPER CDStop()
  {
  _retni( SendCDCommand( CD_STOP_COMMAND, NULL, 0, FALSE ) );
  }



CLIPPER CDResume()
  {
  _retni( SendCDCommand( CD_RESUME_COMMAND, NULL, 0, FALSE ) );
  }



CLIPPER CDPlay()
  {
  int  Track  = _parni( 1 );
  int  nSongs = _parni( 2 ) + Track;
  long StartSector;
  long EndSector;

  if ( _cdInstall() )
    {
    DiskInfo.CommandCode = GET_AUDIO_DISKINFO;
    SendCDCommand( READ_IOCTL_COMMAND, & DiskInfo, sizeof( CDDiskInfoStru ), FALSE );
    SendCDCommand( CD_STOP_COMMAND, NULL, 0, FALSE );
    if ( nSongs == Track || nSongs > DiskInfo.HiTrack - DiskInfo.LoTrack + 1 )
      EndSector   = Red2HSG( DiskInfo.LeadOut ) - 150L;
    else
      EndSector   = CDTrackInfo( nSongs, 0, 0, 0 ) - 150L;
    StartSector = CDTrackInfo( Track, 0, 0, 0 ) - 150L;
    _retni( SendCDCommand( CD_PLAY_COMMAND, (FARP)StartSector, EndSector - StartSector, TRUE ) );
    }
  }



CLIPPER CDEject()
  {
  CDEjectStru EjectRequestBlock;

  EjectRequestBlock.CommandCode = CD_EJECT_COMMAND;
  _retni( SendCDCommand( WRITE_IOCTL_COMMAND, & EjectRequestBlock, sizeof( CDEjectStru ), FALSE ) );
  }


CLIPPER CDTime()
  {
  CDStatusStru StatusRequestBlock;
  CDDiskStatus DiskStatus;

  DiskStatus.SongNumber = 0;
  DiskStatus.Minutos    = 0;
  DiskStatus.Segundos   = 0;
  DiskStatus.Decimas    = 0;
  StatusRequestBlock.CommandCode = CD_STATUS_COMMAND;
  if ( 768 == SendCDCommand( READ_IOCTL_COMMAND, & StatusRequestBlock, sizeof( CDStatusStru ), FALSE ) )
    {
    DiskStatus.CommandCode = GET_AUDIO_TIMEINFO;
    DiskStatus.TrackNumber = 0x01;
    SendCDCommand( READ_IOCTL_COMMAND, & DiskStatus, sizeof( CDDiskStatus ), TRUE );
    DiskStatus.SongNumber = Song2Real( DiskStatus.SongNumber );
    }
  _reta( 4 );
  _storni( DiskStatus.SongNumber, -1, 1 );
  _storni( DiskStatus.Minutos,    -1, 2 );
  _storni( DiskStatus.Segundos,   -1, 3 );
  _storni( DiskStatus.Decimas,    -1, 4 );
  }


CLIPPER CDNext()
  {
  long StartSector;
  long EndSector;
  CDStatusStru StatusRequestBlock;
  CDDiskStatus DiskStatus;

  StatusRequestBlock.CommandCode = CD_STATUS_COMMAND;
  if ( 768 == SendCDCommand( READ_IOCTL_COMMAND, & StatusRequestBlock, sizeof( CDStatusStru ), FALSE ) )
    {
    DiskStatus.CommandCode = GET_AUDIO_TIMEINFO;
    DiskStatus.TrackNumber = 0x01;
    SendCDCommand( READ_IOCTL_COMMAND, & DiskStatus, sizeof( CDDiskStatus ), TRUE );
    DiskStatus.SongNumber = Song2Real( DiskStatus.SongNumber );
    DiskInfo.CommandCode = GET_AUDIO_DISKINFO;
    SendCDCommand( READ_IOCTL_COMMAND, & DiskInfo, sizeof( CDDiskInfoStru ), FALSE );
    if ( DiskInfo.HiTrack > DiskStatus.SongNumber )
      {
      SendCDCommand( CD_STOP_COMMAND, NULL, 0, FALSE );
      EndSector   = Red2HSG( DiskInfo.LeadOut ) - 150L;
      StartSector = CDTrackInfo( DiskStatus.SongNumber + 1, 0, 0, 0 ) - 150L;
      SendCDCommand( CD_PLAY_COMMAND, (FARP)StartSector, EndSector - StartSector, TRUE );
      }
    }
  }


CLIPPER CDPrevious()
  {
  long StartSector;
  long EndSector;
  CDStatusStru StatusRequestBlock;
  CDDiskStatus DiskStatus;

  StatusRequestBlock.CommandCode = CD_STATUS_COMMAND;
  if ( 768 == SendCDCommand( READ_IOCTL_COMMAND, & StatusRequestBlock, sizeof( CDStatusStru ), FALSE ) )
    {
    DiskStatus.CommandCode = GET_AUDIO_TIMEINFO;
    DiskStatus.TrackNumber = 0x01;
    SendCDCommand( READ_IOCTL_COMMAND, & DiskStatus, sizeof( CDDiskStatus ), TRUE );
    DiskStatus.SongNumber = Song2Real( DiskStatus.SongNumber );
    DiskInfo.CommandCode = GET_AUDIO_DISKINFO;
    SendCDCommand( READ_IOCTL_COMMAND, & DiskInfo, sizeof( CDDiskInfoStru ), FALSE );
    if ( DiskInfo.LoTrack < DiskStatus.SongNumber )
      {
      SendCDCommand( CD_STOP_COMMAND, NULL, 0, FALSE );
      EndSector   = Red2HSG( DiskInfo.LeadOut ) - 150L;
      StartSector = CDTrackInfo( DiskStatus.SongNumber - 1, 0, 0, 0 ) - 150L;
      SendCDCommand( CD_PLAY_COMMAND, (FARP)StartSector, EndSector - StartSector, TRUE );
      }
    else
      {
      SendCDCommand( CD_STOP_COMMAND, NULL, 0, FALSE );
      EndSector   = Red2HSG( DiskInfo.LeadOut ) - 150L;
      StartSector = CDTrackInfo( DiskInfo.LoTrack, 0, 0, 0 ) - 150L;
      SendCDCommand( CD_PLAY_COMMAND, (FARP)StartSector, EndSector - StartSector, TRUE );
      }
    }
  }


CLIPPER CDClose()
  {
  CDEjectStru EjectRequestBlock;

  EjectRequestBlock.CommandCode = CD_CLOSE_COMMAND;
  _retni( SendCDCommand( WRITE_IOCTL_COMMAND, & EjectRequestBlock, sizeof( CDEjectStru ), FALSE ) );
  }



CLIPPER CDStatus()
  {
  CDStatusStru StatusRequestBlock;
  WORD  nStatus;
  WORD  nPlay;

  StatusRequestBlock.CommandCode = CD_STATUS_COMMAND;
  nPlay   = SendCDCommand( READ_IOCTL_COMMAND, & StatusRequestBlock, sizeof( CDStatusStru ), FALSE );
  nStatus = (WORD)( StatusRequestBlock.Status );
  _reta( 3 );
  _storl(     nStatus  &    1,   -1, 1 );  // puerta?
  _storl(     nPlay   ==  768,   -1, 2 );  // playing?
  _storl( ! ( nStatus  & 2048 ), -1, 3 );  // hay disco ?
  }


CLIPPER CDInfo()
  {
  INDEX nInd;
  BYTE  cBuffer[ 6 ];
  LONG  Mins;
  LONG  Secs;
  LONG  PlusFrames;

  DiskInfo.CommandCode = GET_AUDIO_DISKINFO;
  SendCDCommand( READ_IOCTL_COMMAND, &DiskInfo, sizeof( CDDiskInfoStru ), FALSE );
  for ( nInd = DiskInfo.LoTrack; nInd <= DiskInfo.HiTrack; nInd++)
    CDTrackInfo( nInd, 0, 0, 0 );
  TrackInfo[DiskInfo.HiTrack+1].StartAddress = DiskInfo.LeadOut;
  _reta( DiskInfo.HiTrack - DiskInfo.LoTrack + 1 );
  for ( nInd = DiskInfo.LoTrack; nInd <= DiskInfo.HiTrack; nInd++ )
    {
    PlusFrames =  Red2HSG( TrackInfo[ nInd + 1 ].StartAddress ) - Red2HSG( TrackInfo[ nInd ].StartAddress );
    Secs       =  _fastDiv( PlusFrames, 75L );
    PlusFrames -= _fastMul( Secs, 75L );
    Mins       =  _fastDiv( Secs, 60L );
    Secs       -= _fastMul( Mins, 60L );
    cBuffer[ 2 ] = ':';
    _fastStr( cBuffer + 0, (BYTE)Mins );
    _fastStr( cBuffer + 3, (BYTE)Secs );
    cBuffer[ 5 ] = 0x0;
    _storc( (LPSTR)cBuffer, -1, nInd );
    }
  }


CLIPPER MSCDEXVer()
  {
  EXOREGS sRegs;
  BYTE    cBuffer[ 5 ];

  if ( _cdInstall() )
    {
    sRegs.ax = 0x150C;
    ExoRMInterrupt( INT_MISCEL, & sRegs, & sRegs );
    _fastStr( cBuffer + 0, sRegs.bx >> 8 );
    cBuffer[ 2 ] = 0x2E;
    _fastStr( cBuffer + 3, sRegs.bx & 0xFF );
    _retclen( (LPSTR)cBuffer, 5 );
    }
  else
    _retclen( "00.00", 5 );
  }


CLIPPER CDDrive()
  {
  BYTE cDrive[ 2 ];

  if ( CDRomLoaded > 0 )
    {
    cDrive[ 0 ] = CDRomDrive + 65;
    cDrive[ 1 ] = ':';
    _retclen( (LPSTR)cDrive, 2 );
    }
  else
    _retclen( "  ", 2 );
  }



CLIPPER CDInstall()
  {
  _retl( _cdInstall() );
  }



