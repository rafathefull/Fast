/* 
------------------------------------------------------------------------
FASTlib for Clipper, including all source code, examples and any other 
file has been donated to Open Source community

Manu Roibal. Bilbao, May 7 2011

------------------------------------------------------------------------
Please, contact me at	manuroibal@gmail.com
Follow me at Twitter	@manuroibal on Twitter
My Linkedin profile	www.linkedin.com/manuroibal

Or visit my web site at	www.tonsofit.com
------------------------------------------------------------------------
*/


#pragma inline

#include "\libs\clipapi\clipapi.h"
#include "\clip\bc\include\dos.h"


#define CMODE   0x043
#define CDATA   0x040


HIDE Cmap FliColors[AA_COLORS*3] =
  {
  /* 32 level grey scale */
   0, 0, 0,    2, 2, 2,    4, 4, 4,    6, 6, 6,
   8, 8, 8,   10,10,10,   12,12,12,   14,14,14,
  16,16,16,   18,18,18,   20,20,20,   22,22,22,
  24,24,24,   26,26,26,   28,28,28,   30,30,30,
  33,33,33,   35,35,35,   37,37,37,   39,39,39,
  41,41,41,   43,43,43,   45,45,45,   47,47,47,
  49,49,49,   51,51,51,   53,53,53,   55,55,55,
  57,57,57,   59,59,59,   61,61,61,   63,63,63,
  /* A hand threaded 6x6x6 rgb cube */
  63,51,51,   63,63,51,   51,63,51,   51,63,63,
  51,51,63,   63,51,63,   63,39,39,   63,51,39,
  63,63,39,   51,63,39,   39,63,39,   39,63,51,
  39,63,63,   39,51,63,   39,39,63,   51,39,63,
  63,39,63,   63,39,51,   63,27,27,   63,39,27,
  63,51,27,   63,63,27,   51,63,27,   39,63,27,
  27,63,27,   27,63,39,   27,63,51,   27,63,63,
  27,51,63,   27,39,63,   27,27,63,   39,27,63,
  51,27,63,   63,27,63,   63,27,51,   63,27,39,
  63,15,15,   63,27,15,   63,39,15,   63,51,15,
  63,63,15,   51,63,15,   39,63,15,   27,63,15,
  15,63,15,   15,63,27,   15,63,39,   15,63,51,
  15,63,63,   15,51,63,   15,39,63,   15,27,63,
  15,15,63,   27,15,63,   39,15,63,   51,15,63,
  63,15,63,   63,15,51,   63,15,39,   63,15,27,
  63, 3,15,   63, 3, 3,   63,15, 3,   63,27, 3,
  63,39, 3,   63,51, 3,   63,63, 3,   51,63, 3,
  39,63, 3,   27,63, 3,   15,63, 3,    3,63, 3,
   3,63,15,    3,63,27,    3,63,39,    3,63,51,
   3,63,63,    3,51,63,    3,39,63,    3,27,63,
   3,15,63,    3, 3,63,   15, 3,63,   27, 3,63,
  39, 3,63,   51, 3,63,   63, 3,63,   63, 3,51,
  63, 3,39,   63, 3,27,   51, 3,15,   51, 3, 3,
  51,15, 3,   51,27, 3,   51,39, 3,   51,51, 3,
  39,51, 3,   27,51, 3,   15,51, 3,    3,51, 3,
   3,51,15,    3,51,27,    3,51,39,    3,51,51,
   3,39,51,    3,27,51,    3,15,51,    3, 3,51,
  15, 3,51,   27, 3,51,   39, 3,51,   51, 3,51,
  51, 3,39,   51, 3,27,   39, 3,15,   39, 3, 3,
  39,15, 3,   39,27, 3,   39,39, 3,   27,39, 3,
  15,39, 3,    3,39, 3,    3,39,15,    3,39,27,
   3,39,39,    3,27,39,    3,15,39,    3, 3,39,
  15, 3,39,   27, 3,39,   39, 3,39,   39, 3,27,
  27, 3,15,   27, 3, 3,   27,15, 3,   27,27, 3,
  15,27, 3,    3,27, 3,    3,27,15,    3,27,27,
   3,15,27,    3, 3,27,   15, 3,27,   27, 3,27,
  15, 3, 3,   15,15, 3,    3,15, 3,    3,15,15,
   3, 3,15,   15, 3,15,   27,15,15,   27,27,15,
  15,27,15,   15,27,27,   15,15,27,   27,15,27,
  39,15,15,   39,27,15,   39,39,15,   27,39,15,
  15,39,15,   15,39,27,   15,39,39,   15,27,39,
  15,15,39,   27,15,39,   39,15,39,   39,15,27,
  51,15,15,   51,27,15,   51,39,15,   51,51,15,
  39,51,15,   27,51,15,   15,51,15,   15,51,27,
  15,51,39,   15,51,51,   15,39,51,   15,27,51,
  15,15,51,   27,15,51,   39,15,51,   51,15,51,
  51,15,39,   51,15,27,   51,27,27,   51,39,27,
  51,51,27,   39,51,27,   27,51,27,   27,51,39,
  27,51,51,   27,39,51,   27,27,51,   39,27,51,
  51,27,51,   51,27,39,   51,39,39,   51,51,39,
  39,51,39,   39,51,51,   39,39,51,   51,39,51,
  39,27,27,   39,39,27,   27,39,27,   27,39,39,
  27,27,39,   39,27,39,    3, 3, 3,   15,15,15,
  27,27,27,   39,39,39,   51,51,51,   63,63,63,
   /* 3 empty slots */
  63,22, 3,   39, 7, 5,   36,36,63,
   /* Colors the system would like to use for interface */
  0, 0, 0,     22,22,22,  38,38,38,   52,52,52,   63, 0, 0,
  };


HIDE Vscreen FliScreen;



HIDE FHANDLE FliOpen( LPSTR cFliName, Fli_head *fh )
  {
  FHANDLE nHandle;

  _fastForce();
  if ( ( nHandle = _topen( cFliName, 64 ) ) == 0 )
    return( AA_ERR_CANTFIND );
  if ( _tread( nHandle, (LPBYTE)fh, sizeof( *fh ) ) == sizeof( *fh ) )
    if ( fh->type == FLIH_MAGIC )
      return( nHandle );
  _tclose( nHandle );
  return( AA_ERR_BADTYPE );
  }


HIDE WORD FliUntilKey()
  {
  if ( _fastKey() )
    {
    _fastProcKey();
    return( 0 );
    }
  else
    return( 1 );
  }


HIDE int FastFliPlay( LPSTR cFliName )
  {
  return( FliUntil( cFliName, -1, (AAivec)FliUntilKey ) );
  }


HIDE WORD FliUntilFinished( int cur_frame, int frame_count )
  {
  return( cur_frame < frame_count );
  }


HIDE int FastFliOnce( LPSTR cFliName )
  {
  return( FliUntil( cFliName, -1, (AAivec)FliUntilFinished ) );
  }


HIDE int FliUntil( LPSTR fliname, int speed, AAivec until )
  {
  FHANDLE  nHandle;
  Fli_head fhead;
  long     frame1off;
  int      err;
  INDEX    nInd;
  long     time, last_time, dest_time;
  int      cur_frame;

  outportb( CMODE, 0x34 );
  outportb( CDATA, 0x0 );
  outportb( CDATA, 0x0 );
  if ( ( nHandle = FliOpen( fliname, &fhead ) ) == 0xFFFF )
    return( (int)nHandle );
  cur_frame = 0;
  if ( ! (*until)(cur_frame, (int)fhead.frame_count ) )
    goto OUT;
  if ( ( err = FliNextFrame( nHandle ) ) >= AA_SUCCESS )
    frame1off = _tlseek( nHandle, 0L, 1 );
  last_time = FliGetClock();
  if (speed < 0)
    speed = fhead.speed;
  speed *= AA_CLOCK_SCALE;
  for (;;)
    {
    _tlseek( nHandle, frame1off, 0 );
    for ( nInd = 0; nInd < fhead.frame_count; nInd++ )
      {
      cur_frame++;
      dest_time = last_time + speed;
      for (;;)
        {
        if ( ! (*until)(cur_frame, (int)fhead.frame_count ) )
          goto OUT;
        time = FliGetClock();
        if ( time >= dest_time )
          {
          last_time = time;
          break;
          }
        }
      if ( ( err = FliNextFrame( nHandle ) ) < AA_SUCCESS )
        goto OUT;
      }
    }
  OUT:
  _tclose( nHandle );
  return(err);
  }


HIDE int FliReadDisplayFrame( FHANDLE nHandle, Vscreen *v, WORD see_colors )
  {
  HANDLE hSeg;
  LPBYTE cBuffer;
  Fli_frame fframe;

  if ( _tread( nHandle, (LPBYTE)&fframe, sizeof( fframe ) ) != sizeof( fframe ) )
    return( AA_ERR_SHORTREAD );
  if ( fframe.type != FLIF_MAGIC )
    return( AA_ERR_BADDATA );
  if ( ( fframe.size -= sizeof( fframe ) ) != 0 )
    {
    hSeg    = _vAlloc( (WORD)fframe.size, 0 );
    cBuffer = _vLock( hSeg );
    if ( _tread( nHandle, cBuffer, (WORD)fframe.size ) != fframe.size )
      {
      _vUnLock( hSeg );
      _vFree( hSeg );
      return( AA_ERR_SHORTREAD );
      }
    FliUnComp( v, &fframe, cBuffer, see_colors );
    _vUnLock( hSeg );
    _vFree( hSeg );
    }
  return( AA_SUCCESS );
  }


HIDE int FliNextFrame( FHANDLE nHandle )
  {
  return( FliReadDisplayFrame( nHandle, &FliScreen, TRUE ) );
  }


HIDE void FliUnComp( Vscreen *f, Fli_frame *frame, Cbuf *cbuf, WORD see_colors )
  {
  INDEX  nInd;
  struct fli_chunk *chunk;
  Cbuf   *cb1;

  if (see_colors)
    while( ! ( inportb( 0x3da ) & 8 ) );
  for ( nInd = 0; nInd < frame->chunks; nInd++ )
    {
    chunk = (struct fli_chunk *)cbuf;
    cb1 = (Cbuf *)(chunk+1);
    switch (chunk->type)
      {
      case FLI_COLOR:
        if (see_colors)
          FliRegFcUnComp(cb1);
        FliMemFcUnComp( cb1, f->cmap );
        break;
      case FLI_LC:
        FliUnLcComp( cb1, f->p );
        break;
      case FLI_BLACK:
        _bset( f->p, 0x0, (WORD)64000L );
        break;
      case FLI_BRUN:
        FliUnBrun( cb1, f->p, f->h );
        break;
      case FLI_COPY:
        _bcopy( cb1, f->p, (WORD)64000L );
        break;
      }
    cbuf += (WORD)( chunk->size );
    }
  }


HIDE int FliShow( LPSTR cFile, WORD nMode )
  {
  int ivmode;
  int nErr = -11;

  FliScreen.x        = 0;
  FliScreen.y        = 0;
  FliScreen.w        = AA_XMAX;
  FliScreen.h        = AA_YMAX;
  FliScreen.bpr      = AA_XMAX;
  FliScreen.p        = vPointerGraph;
  FliScreen.cmap     = FliColors;
  FliScreen.psize    = _fastMul( AA_XMAX, AA_YMAX );
  FliScreen.allocedp = NULL;
  ivmode = _fastVideoMode( 0x13 );
  if ( nMode )
    nErr = FastFliOnce( cFile );
  else
    nErr = FastFliPlay( cFile );
  _fastVideoMode( ivmode );
  return( nErr );
  }


CLIPPER FliOnce()
  {
  _retni( FliShow( _parc( 1 ), TRUE ) );
  }


CLIPPER FliEver()
  {
  _retni( FliShow( _parc( 1 ), FALSE ) );
  }

